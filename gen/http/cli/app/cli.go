// Code generated by goa v3.2.5, DO NOT EDIT.
//
// app HTTP client CLI support package
//
// Command:
// $ goa gen sample/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	actionsc "sample/gen/http/actions/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `actions (ping|hello|id)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` actions ping` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		actionsFlags = flag.NewFlagSet("actions", flag.ContinueOnError)

		actionsPingFlags = flag.NewFlagSet("ping", flag.ExitOnError)

		actionsHelloFlags    = flag.NewFlagSet("hello", flag.ExitOnError)
		actionsHelloBodyFlag = actionsHelloFlags.String("body", "REQUIRED", "")

		actionsIDFlags  = flag.NewFlagSet("id", flag.ExitOnError)
		actionsIDIDFlag = actionsIDFlags.String("id", "REQUIRED", "id")
	)
	actionsFlags.Usage = actionsUsage
	actionsPingFlags.Usage = actionsPingUsage
	actionsHelloFlags.Usage = actionsHelloUsage
	actionsIDFlags.Usage = actionsIDUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "actions":
			svcf = actionsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "actions":
			switch epn {
			case "ping":
				epf = actionsPingFlags

			case "hello":
				epf = actionsHelloFlags

			case "id":
				epf = actionsIDFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "actions":
			c := actionsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "ping":
				endpoint = c.Ping()
				data = nil
			case "hello":
				endpoint = c.Hello()
				data, err = actionsc.BuildHelloPayload(*actionsHelloBodyFlag)
			case "id":
				endpoint = c.ID()
				data, err = actionsc.BuildIDPayload(*actionsIDIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// actionsUsage displays the usage of the actions command and its subcommands.
func actionsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the actions service interface.
Usage:
    %s [globalflags] actions COMMAND [flags]

COMMAND:
    ping: サーバーとの導通確認
    hello: 挨拶する
    id: 複数アクション（:id）

Additional help:
    %s actions COMMAND --help
`, os.Args[0], os.Args[0])
}
func actionsPingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] actions ping

サーバーとの導通確認

Example:
    `+os.Args[0]+` actions ping
`, os.Args[0])
}

func actionsHelloUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] actions hello -body JSON

挨拶する
    -body JSON: 

Example:
    `+os.Args[0]+` actions hello --body '{
      "name": "Illum debitis reiciendis quam dolorem."
   }'
`, os.Args[0])
}

func actionsIDUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] actions id -id INT

複数アクション（:id）
    -id INT: id

Example:
    `+os.Args[0]+` actions id --id 4829274303218712375
`, os.Args[0])
}
