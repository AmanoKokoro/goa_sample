// Code generated by goa v3.2.5, DO NOT EDIT.
//
// actions HTTP server
//
// Command:
// $ goa gen sample/design

package server

import (
	"context"
	"net/http"
	actions "sample/gen/actions"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the actions service endpoint HTTP handlers.
type Server struct {
	Mounts []*MountPoint
	Ping   http.Handler
	Hello  http.Handler
	ID     http.Handler
	CORS   http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the actions service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *actions.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Ping", "PUT", "/ping"},
			{"Hello", "GET", "/hello"},
			{"ID", "GET", "/{id}"},
			{"CORS", "OPTIONS", "/ping"},
			{"CORS", "OPTIONS", "/hello"},
			{"CORS", "OPTIONS", "/{id}"},
		},
		Ping:  NewPingHandler(e.Ping, mux, decoder, encoder, errhandler, formatter),
		Hello: NewHelloHandler(e.Hello, mux, decoder, encoder, errhandler, formatter),
		ID:    NewIDHandler(e.ID, mux, decoder, encoder, errhandler, formatter),
		CORS:  NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "actions" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Ping = m(s.Ping)
	s.Hello = m(s.Hello)
	s.ID = m(s.ID)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the actions endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountPingHandler(mux, h.Ping)
	MountHelloHandler(mux, h.Hello)
	MountIDHandler(mux, h.ID)
	MountCORSHandler(mux, h.CORS)
}

// MountPingHandler configures the mux to serve the "actions" service "ping"
// endpoint.
func MountPingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleActionsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/ping", f)
}

// NewPingHandler creates a HTTP handler which loads the HTTP request and calls
// the "actions" service "ping" endpoint.
func NewPingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodePingResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ping")
		ctx = context.WithValue(ctx, goa.ServiceKey, "actions")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountHelloHandler configures the mux to serve the "actions" service "hello"
// endpoint.
func MountHelloHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleActionsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/hello", f)
}

// NewHelloHandler creates a HTTP handler which loads the HTTP request and
// calls the "actions" service "hello" endpoint.
func NewHelloHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeHelloRequest(mux, decoder)
		encodeResponse = EncodeHelloResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "hello")
		ctx = context.WithValue(ctx, goa.ServiceKey, "actions")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIDHandler configures the mux to serve the "actions" service "ID"
// endpoint.
func MountIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleActionsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{id}", f)
}

// NewIDHandler creates a HTTP handler which loads the HTTP request and calls
// the "actions" service "ID" endpoint.
func NewIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIDRequest(mux, decoder)
		encodeResponse = EncodeIDResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ID")
		ctx = context.WithValue(ctx, goa.ServiceKey, "actions")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service actions.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleActionsOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/ping", f)
	mux.Handle("OPTIONS", "/hello", f)
	mux.Handle("OPTIONS", "/{id}", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleActionsOrigin applies the CORS response headers corresponding to the
// origin for the service actions.
func handleActionsOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "http://localhost:8080/swagger") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				w.Header().Set("Access-Control-Allow-Headers", "X-Time")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
